{
  "name": "Kcats",
  "tagline": "A stack implementation for node",
  "body": "# kcats\r\nA stack implementation for node\r\n\r\n[![NPM](https://nodei.co/npm/kcats.png)](https://nodei.co/npm/kcats/)\r\n\r\n[![Build Status](https://travis-ci.org/JakenHerman/kcats.svg?branch=master)](https://travis-ci.org/JakenHerman/kcats)\r\n\r\n## Installation\r\n\r\n`npm install kcats`\r\n\r\n## Usage \r\n`var kcats = require(\"kcats\")`\r\nThen use `var stack_name = new kcats(10, 2);` where `10`, here, is the maximum size of the total stack space, and `2` is how many stacks are created. Multiple stacks are created in one array. So the array will be 10 spaces, and stack 1 will be array space 0-4, and stack 2 will be array space 5-9. Of course, there can be more than 2 stacks.\r\n\r\n## API\r\n - `stack_name._isEmpty(stack_number)` -> Boolean : Determines whether or not the stack contains anything.\r\n - `stack_name._reset(stack_number)` -> Void : Allows you to instantaneously pop all elements, without printing them.\r\n - `stack_name._isFull(stack_number)` -> Boolean : Determines whether or not the stack is full.\r\n - `stack_name._push(item, stack_number)` -> Void : Allows you to add an item to the stack.\r\n - `stack_name._pop(stack_number)` -> Item : Allows you to retrieve the element at the top of the stack.\r\n - `stack_name._peek(stack_number)` -> Item : Allows you to print the element at the top of the stack without removing it.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}